from reportlab.lib.pagesizes import A4 
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
from reportlab.platypus import (
    BaseDocTemplate, PageTemplate, Frame, Paragraph, Spacer, PageBreak, 
    Table, TableStyle, KeepTogether, Image
)
from reportlab.lib import colors
from reportlab.pdfgen import canvas
import datetime
from typing import List, Dict


class NumberedCanvas(canvas.Canvas):
    def __init__(self, *args, **kwargs):
        canvas.Canvas.__init__(self, *args, **kwargs)
        self._saved_page_states = []

    def showPage(self):
        self._saved_page_states.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        """Add page info to each page (page x of y)"""
        num_pages = len(self._saved_page_states)
        for state in self._saved_page_states:
            self.__dict__.update(state)
            self.draw_page_number(num_pages)
            canvas.Canvas.showPage(self)
        canvas.Canvas.save(self)

    def draw_page_number(self, page_count):
        # Draw page number at the bottom of each page
        self.setFont("Helvetica", 9)
        self.drawRightString(A4[0] - 50, 30, f"Page {self._pageNumber} of {page_count}")


def generate_report(vuln_data: List[Dict], filepath: str):
    # Create a document with customized page templates
    doc = BaseDocTemplate(
        filepath, 
        pagesize=A4,
        rightMargin=50,
        leftMargin=50,
        topMargin=50,
        bottomMargin=50
    )
    
    # Create frame for content
    frame = Frame(doc.leftMargin, doc.bottomMargin, doc.width, doc.height, id='normal')
    
    # Add PDF metadata
    today = datetime.date.today().strftime("%d-%b-%Y")
    doc.title = "Automated Vulnerability Report"
    doc.author = "HTC Global – Security Automation Tool"
    doc.subject = f"OWASP Top 10 Vulnerability Report - {today}"
    
    # Styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'TitleStyle', parent=styles['Heading1'], alignment=TA_CENTER, 
        fontSize=24, spaceAfter=20, textColor=colors.HexColor("#1F497D")
    )
    subtitle_style = ParagraphStyle(
        'SubtitleStyle', parent=styles['Normal'], alignment=TA_CENTER, 
        fontSize=16, textColor=colors.grey, spaceAfter=30
    )
    section_header = ParagraphStyle(
        'SectionHeader', parent=styles['Heading2'], spaceBefore=12, 
        spaceAfter=6, textColor=colors.HexColor("#1F497D"), fontSize=14
    )
    normal_text = ParagraphStyle(
        'NormalText', parent=styles['Normal'], fontSize=11, 
        leading=16, alignment=TA_JUSTIFY
    )
    bullet_style = ParagraphStyle(
        'BulletStyle', parent=styles['Normal'], fontSize=11, 
        leftIndent=20, bulletIndent=10, spaceAfter=4
    )
    toc_title_style = ParagraphStyle(
        'TOCTitleStyle', parent=styles['Heading1'], alignment=TA_CENTER, 
        fontSize=18, spaceAfter=20, textColor=colors.HexColor("#1F497D")
    )
    
    # Create story elements
    elements = []

    from reportlab.platypus import Image

    # -------- Cover Page --------
    logo = Image("static/img/logo.png", width=200, height=130)  # adjust size as needed
    logo.hAlign = 'CENTER'
    elements.append(logo)
    elements.append(Spacer(1, 30))

    elements.append(Paragraph("Vulnerability Report", title_style))
    elements.append(Paragraph("HTC Global – Automated Security Report Tool", subtitle_style))
    elements.append(Spacer(1, 40))

    # Metadata table for neat layout
    meta_data = [
        ["Report Title", "Vulnerability Assessment Report"],
        ["Organization", "HTC Global"],
        ["Generated By", "Automated Security Tool"],
        ["Report Date", today],
        ["Classification", "Confidential – Internal Use Only"],
    ]
    meta_table = Table(meta_data, colWidths=[150, 300])
    meta_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (0,-1), colors.HexColor("#F2F2F2")),
        ('FONTNAME', (0,0), (0,-1), 'Helvetica-Bold'),
        ('GRID', (0,0), (-1,-1), 1, colors.black),
        ('PADDING', (0,0), (-1,-1), 6),
    ]))
    elements.append(meta_table)

    elements.append(Spacer(1, 60))

    # short executive summary
    elements.append(Paragraph(
        "This automated report provides an overview of security vulnerabilities "
        "identified during the assessment. The findings are mapped to the OWASP Top 10 "
        "categories and include detailed descriptions, proofs of concept, and remediation steps.",
        normal_text
    ))

    elements.append(PageBreak())

    
    # -------- Table of Contents --------
    elements.append(Paragraph("Table of Contents", toc_title_style))
    elements.append(Spacer(1, 20))
    
    # Estimate TOC entries
    toc_data = [['Vulnerability Name', 'OWASP Category', 'Page']]
    current_page = 3
    for vuln in vuln_data:
        toc_data.append([vuln['vuln_name'], vuln['owasp_category'], str(current_page)])
        current_page += 2
    
    toc_table = Table(toc_data, colWidths=[200, 200, 50])
    toc_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#D9E1F2")),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('TOPPADDING', (0, 1), (-1, -1), 6),
        ('BOTTOMPADDING', (0, 1), (-1, -1), 6),
    ]))
    
    elements.append(toc_table)
    elements.append(PageBreak())
    
    # -------- Vulnerability Sections --------
    for i, vuln in enumerate(vuln_data):
        section = []

        # Title
        section.append(Paragraph(vuln['vuln_name'], styles['Heading1']))
        section.append(Spacer(1, 10))
        
        # Basic Info Table
        info_data = [
            ["OWASP Category", Paragraph(vuln['owasp_category'], normal_text)],
            ["Severity", Paragraph(vuln['severity'], normal_text)],
            ["Affected Component", Paragraph(vuln.get('affected_component', 'N/A'), normal_text)],
            ["Status", Paragraph(vuln['status'], normal_text)]
        ]
        info_table = Table(info_data, colWidths=[120, 350])
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor("#F2F2F2")),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('PADDING', (0, 0), (-1, -1), 5),
        ]))
        section.append(info_table)
        section.append(Spacer(1, 15))
        
        # Description
        section.append(Paragraph("Description", section_header))
        section.append(Paragraph(vuln['description'], normal_text))
        section.append(Spacer(1, 10))
        
        # Proof of Concept
        if vuln.get("proof_of_concept"):
            section.append(Paragraph("Proof of Concept", section_header))
            for poc in vuln["proof_of_concept"]:
                section.append(Paragraph(f"• {poc}", bullet_style))
            section.append(Spacer(1, 10))
        
        # Steps to Reproduce
        if vuln.get("steps_to_reproduce"):
            section.append(Paragraph("Steps to Reproduce", section_header))
            for j, step in enumerate(vuln["steps_to_reproduce"], 1):
                section.append(Paragraph(f"{j}. {step}", normal_text))
            section.append(Spacer(1, 10))
        
        # Recommendation
        section.append(Paragraph("Recommendation", section_header))
        section.append(Paragraph(vuln['recommendation'], normal_text))
        section.append(Spacer(1, 10))
        
        # Risk Rating
        section.append(Paragraph("Risk Rating", section_header))
        risk_data = [["Metric", "Value"]]
        for key, value in vuln['risk_rating'].items():
            risk_data.append([key.replace("_", " ").title(), value])
        risk_table = Table(risk_data, colWidths=[150, 300])
        risk_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#D9E1F2")),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('PADDING', (0, 0), (-1, -1), 5),
        ]))
        section.append(risk_table)
        section.append(Spacer(1, 10))
        
        # References
        if vuln.get("references"):
            section.append(Paragraph("References", section_header))
            for ref in vuln['references']:
                section.append(Paragraph(f"• {ref}", bullet_style))
        
        # Add section wrapped in KeepTogether
        elements.append(KeepTogether(section))

        # Page break if not the last vulnerability
        if i < len(vuln_data) - 1:
            elements.append(PageBreak())
    
    # -------- Final Page --------
    elements.append(Spacer(1, 20))
    elements.append(Paragraph("Report Summary", section_header))
    elements.append(Paragraph(f"This report contains details of {len(vuln_data)} security vulnerabilities identified during the assessment.", normal_text))
    elements.append(Spacer(1, 10))
    elements.append(Paragraph("This is a system-generated report. For internal use only.", normal_text))
    
    # Build the document with page numbering
    doc.addPageTemplates([PageTemplate(id='All', frames=frame, onPage=lambda canvas, doc: None)])
    doc.build(elements, canvasmaker=NumberedCanvas)
